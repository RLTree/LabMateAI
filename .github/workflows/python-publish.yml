# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - uses: actions/checkout@v4

    # Step 2: Set up Python version
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    # Step 3: Cache pip dependencies for faster builds
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    # Step 6: Run tests with pytest (optional)
    - name: Run tests
      run: |
        pip install pytest
        pytest

    # Step 7: Build the package
    - name: Build package
      run: python -m build

    # Step 8: Publish package to PyPI
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
